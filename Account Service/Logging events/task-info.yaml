type: edu
files:
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.h2database:h2'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.springframework.http.HttpStatus;

    import java.util.*;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }
    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "/api/acct/payments";
      private final String putRoleApi = "/api/admin/user/role";
      private final String putAccessApi = "/api/admin/user/access";
      private final String adminApi = "/api/admin/user/";
      private final String auditorApi = "/api/security/events/";

      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Ivanov")
              .setProps("email", "IvanIvanov@acme.com")
              .setProps("password", "rXoa4CvqpLxW");
      private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
              .setProps("lastname", "Petrov")
              .setProps("email", "PetrPetrov@acme.com")
              .setProps("password", "nWza98hjkLPE");
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");

      private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
      private final String petrPetrovCorrectUser = petrPetrov.toJson();
      private final String jDCorrectUser = johnDoe.toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String petrPetrovWrongPassword = new TestReq(petrPetrov).setProps("password", "none").toJson();
      private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private final String firstResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String secondResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 5).setProps("name", "Petr").setProps("lastname", "Petrov")
                      .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });

      private String[] auditorResponseApi = new String[]{
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "ivanivanov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role AUDITOR to ivanivanov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "maxmustermann@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@google.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "nautilus@pompilius.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role ACCOUNTANT to petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "REMOVE_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Remove role ACCOUNTANT from petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "DELETE_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "CHANGE_PASSWORD").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/changepass").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user/role").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/security/events").setProps("path", "/api/security/events").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "BRUTE_FORCE").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOCK_USER").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "Lock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson()
      };

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }

      CheckResult testApi(String user, String body, int status, String api, String method, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, api, method, message);


        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status, String[] role) {

        HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }



        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                        .value("roles", role));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);

        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();

        HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");

        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
          JsonArray correctJson = getJson(answer).getAsJsonArray();
          JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

          if (responseJson.size() == 0)  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          if (responseJson.size() != correctJson.size())  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          for (int i = 0; i < responseJson.size(); i++) {

            String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
            for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
              roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
            }

            expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                            .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                            .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                            .value("roles", isArray( roles )));
          }
        }
        return CheckResult.correct();
      }

      CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                  String role, String operation, String[] respRoles, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);
        request.addProperty("role", role);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("id", isInteger())
                          .value("name", jsonUser.get("name").getAsString())
                          .value("lastname", jsonUser.get("lastname").getAsString())
                          .value("email", jsonUser.get("email").getAsString().toLowerCase())
                          .value("roles", isArray(respRoles)));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", respRoles[0])
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutAccessApi(String api, HttpStatus status, String user, String reqUser,
                                   String operation, String answer, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response

        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("status", answer));
        } else {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }


        return CheckResult.correct();
      }

      CheckResult testLocking(String api, HttpStatus status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(), api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {

        HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", "Access Denied!")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      private CheckResult testAuditorApi(String api, int status, String user, String answer,
                                         int position, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonArray correctJson = getJson(answer).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
        if (responseJson.size() == 0) {
          throw new WrongAnswer("Empty array in response!");
        }

        if (responseJson.size() != correctJson.size()) {
          throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                  " events in response, must be - " + correctJson.size() + "\n" +
                  "response:\n" + getPrettyJson(responseJson)  + "\n" +
                  "must be:\n " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(responseJson.get(position).toString()).asJson().check(
                  isObject()
                          .value("action", correctJson.get(position).getAsJsonObject().get("action").getAsString())
                          .value("subject", correctJson.get(position).getAsJsonObject().get("subject").getAsString())
                          .value("object", isString( o -> o.contains(correctJson.get(position).getAsJsonObject().get("object").getAsString())))
                          .value("path", isString())
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }

      CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                     String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(),
                api + param, "DELETE", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("user", param.toLowerCase())
                          .value("status", answer));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api + param)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }


      /**
       * Method for testing api response
       *
       * @param user string representation of user information in JSON format (String)
       * @param body request body (String)
       * @param status expected response status (int)
       * @param api testing api (String)
       * @param method method for api (String)
       * @param message test hints for student (String)
       * @return response (HttpResponse)
       */
      private HttpResponse checkResponseStatus(String user, String body,
                                               int status, String api, String method, String message) {
        HttpRequest request = null;
        switch (method) {
          case "GET":
            request = get(api);
            break;
          case "POST":
            request = post(api, body);
            break;
          case "PUT":
            request = put(api, body);
            break;
          case "DELETE":
            request = delete(api);
            break;
        }

        if (user != null) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          request = request.basicAuth(login, password);
        }
        HttpResponse response = request.send();

        if (response.getStatusCode() != status) {
          throw new WrongAnswer(method + " " + api  + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        return response;
      }

      private String getSub (String[] src, int position) {
        return convert(Arrays.copyOfRange(src, 0, position));
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Create administrator and auditor
              () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 1
              () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 2
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      ivanIvanovCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"ROLE_AUDITOR", "ROLE_USER"}, ""), // 3

              // Testing user registration positive tests
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 0,"'CREATE_USER' security event missing"), // 4
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 1,"'CREATE_USER' security event missing"), // 5
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 2,"'GRANT_ROLE' security event missing"), // 6
              () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 7
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 4), 3,"'CREATE_USER' security event missing"), // 8
              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 9
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 5), 4,"'CREATE_USER' security event missing"), // 10

    //
    //          // Test authentication, positive tests
              () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 11
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 12
    //
    //          // Test authentication, negative tests
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 13
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 6), 5,"'LOGIN_FAILED' security event missing"), // 14
              () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 15
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 7), 6,"'LOGIN_FAILED' security event missing"), // 16
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 17
              () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                      "This api only for authenticated user"), // 18
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 8), 7,"'LOGIN_FAILED' security event missing"), // 19

    //          // Testing persistence
              () -> restartApplication(), // 20
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."), // 21

              // Changing roles
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDCorrectUser,
                      jDCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add administrative role to business user!"), // 22
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, "Trying to add role ACCOUNTANT to user"), // 23
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 9), 8,"'GRANT_ROLE' security event missing"), // 24
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"ROLE_USER"}, "Trying to remove role ACCOUNTANT from user"), // 25
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 10), 9,"'REMOVE_ROLE' security event missing"), // 26

              //Delete user
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDCorrectUser,
                      "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 27
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 11), 10,"'DELETE_USER' security event missing"), // 28

              // Change password
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 12), 11,"'CHANGE_PASSWORD' security event missing"), // 30

              // Testing role model negative case
              () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 31
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 13), 12,"'ACCESS_DENIED' security event missing"), // 32
              () -> testRoleModelNegative(adminApi, "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 33
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 14), 13,"'ACCESS_DENIED' security event missing"), // 34
              () -> testRoleModelNegative(adminApi, "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 35
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 15), 14,"'ACCESS_DENIED' security event missing"), // 36
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 37
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 16), 15,"'ACCESS_DENIED' security event missing"), // 38
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                      "", "Trying to access endpoint with wrong role"), // 39
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 17), 16,"'ACCESS_DENIED' security event missing"), // 40
              () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 41
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 18), 17,"'ACCESS_DENIED' security event missing"), // 42

              () -> testRoleModelNegative(auditorApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 43
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 19), 18,"'ACCESS_DENIED' security event missing"), // 44

              // Testing locking user
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 45
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 20), 19,"'LOGIN_FAILED' security event missing"), // 46
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 47
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 21), 20,"'LOGIN_FAILED' security event missing"), // 48
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 49
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 22), 21,"'LOGIN_FAILED' security event missing"), // 50
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 51
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 23), 22,"'LOGIN_FAILED' security event missing"), // 52
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 53
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 23,"'LOGIN_FAILED' security event missing"), // 54
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password"), // 55
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 24,"'BRUTE_FORCE' security event missing"), // 56
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"UNLOCK",
                      "User maxmustermann@acme.com unlocked!", "User must be unlocked through admin endpoint"), // 57
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 25,"'LOCK_USER' security event missing"), // 58
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 26,"'UNLOCK_USER' security event missing"), // 59
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 60
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 28), 27,"'LOGIN_FAILED' security event missing"), // 61
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 62
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 29), 28,"'LOGIN_FAILED' security event missing"), // 63
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 64
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 30), 29,"'LOGIN_FAILED' security event missing"), // 65
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 66
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 31), 30,"'LOGIN_FAILED' security event missing"), // 67
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login!"), // 68
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 69
              () -> testUserRegistration(maxMusCorrectUser, 200,
                      "Counter of failed login attempts must be reset after successfully login!"), // 70
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"LOCK",
                      "User maxmustermann@acme.com locked!", ""), // 71
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 33), 31,"'LOCK_USER' security event missing"), // 72
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked through admin endpoint"), // 72
              () -> testPutAccessApi(putAccessApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDCorrectUser,"LOCK",
                      "Can't lock the ADMINISTRATOR!", ""),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      firstResponseAdminApi, "Api must be available to admin user"),

              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "User must be locked only after 5 attempts with wrong password"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "In case of a successful login, reset the counter of the failed attempt."),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, petrPetrovCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password!"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      secondResponseAdminApi, "Api must be available to admin user")
      };

    }
  learner_created: false
- name: src/account/util/enumeration/Role.java
  visible: true
  text: |
    package account.util.enumeration;

    public enum Role {
        ROLE_USER,
        ROLE_ACCOUNTANT,
        ROLE_ADMINISTRATOR;
    }
  learner_created: true
- name: src/account/model/dto/NewUserDTO.java
  visible: true
  text: |
    package account.model.dto;

    import account.validation.ValidPassword;
    import account.validation.ValidEmail;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.*;

    import javax.validation.constraints.NotEmpty;

    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor
    @Builder
    public class NewUserDTO {

        @NotEmpty(message = "name required")
        private String name;

        @NotEmpty(message = "lastname required")
        private String lastname;

        @NotEmpty(message = "email required")
        @ValidEmail
        private String email;

        @ValidPassword
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @NotEmpty(message = "password required")
        private String password;
    }
  learner_created: true
- name: src/account/exception/SamePasswordException.java
  visible: true
  text: |
    package account.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The passwords must be different!")
    public class SamePasswordException extends RuntimeException{
        public SamePasswordException() {
            super();
        }
    }
  learner_created: true
- name: src/account/model/User.java
  visible: true
  text: |
    package account.model;

    import account.util.enumeration.Role;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.*;

    import javax.persistence.*;
    import java.util.HashSet;
    import java.util.List;
    import java.util.Set;

    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor
    @Builder
    @Entity
    @Table(name = "user")
    public class User {

        @Id
        @JsonProperty(access = JsonProperty.Access.READ_ONLY)
        @GeneratedValue(strategy = GenerationType.AUTO)
        private Long id;

        private String name;

        private String lastname;

        private String email;

        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        private String password;

        @OneToMany(mappedBy = "user")
        @JsonIgnore
        private List<Payment> payments;

        @Enumerated(EnumType.STRING)
        @ElementCollection(fetch = FetchType.EAGER)
        private Set<Role> roles;

        public void grantAuthority(Role role) {
            if (roles == null) {
                roles = new HashSet<>();
            }
            roles.add(role);
        }

        public void removeAuthority(Role role) {
            if (roles == null) {
                roles = new HashSet<>();
            }
            roles.remove(role);
        }
    }
  learner_created: true
- name: src/account/exception/UserNotFoundException.java
  visible: true
  text: |
    package account.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "User not found!")
    public class UserNotFoundException extends RuntimeException {
        public UserNotFoundException() {
            super();
        }
    }
  learner_created: true
- name: src/account/model/dto/DeleteUserResponseDTO.java
  visible: true
  text: |
    package account.model.dto;

    import lombok.Getter;
    import lombok.RequiredArgsConstructor;

    @Getter
    @RequiredArgsConstructor
    public class DeleteUserResponseDTO {
        private final String user;
        private final String status = "Deleted successfully!";
    }
  learner_created: true
- name: src/account/service/AdminService.java
  visible: true
  text: |
    package account.service;

    import account.mapper.UserMapper;
    import account.model.dto.ChangeUserRoleDTO;
    import account.model.dto.DeleteUserResponseDTO;
    import account.model.dto.UserInfoDTO;
    import account.util.enumeration.Role;
    import account.model.User;
    import account.repository.UserRepository;
    import lombok.AllArgsConstructor;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.Arrays;
    import java.util.List;
    import java.util.stream.Collectors;

    @Service
    @AllArgsConstructor
    public class AdminService {

        private final UserMapper userMapper;
        private final UserRepository userRepository;

        public ResponseEntity<List<UserInfoDTO>> informationAboutEmployee() {
            return ResponseEntity.ok(userRepository.findAll()
                    .stream()
                    .map(userMapper::mapUserToUserInfoDTO)
                    .collect(Collectors.toList()));
        }

        public ResponseEntity<DeleteUserResponseDTO> deleteUser(String userEmail) {
            User user = userRepository.findByEmailIgnoreCase(userEmail)
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!"));
            if (user.getRoles().contains(Role.ROLE_ADMINISTRATOR)) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");
            }
            userRepository.delete(user);
            return ResponseEntity.ok(new DeleteUserResponseDTO(userEmail));
        }

        public ResponseEntity<UserInfoDTO> changeUserRole(ChangeUserRoleDTO changeUserRoleDTO) {
            User user = userRepository.findByEmailIgnoreCase(changeUserRoleDTO.getUser())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!"));

            changeUserRoleDTO.setRole("ROLE_" + changeUserRoleDTO.getRole());

            if (Arrays.stream(Role.values())
                    .noneMatch(role ->
                            role.toString().equals(changeUserRoleDTO.getRole()))) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Role not found!");
            }

            switch (changeUserRoleDTO.getOperation()) {
                case GRANT -> grantRole(user, changeUserRoleDTO.getRole());
                case REMOVE -> removeRole(user, changeUserRoleDTO.getRole());
                default -> throw new IllegalStateException("Unexpected value: " + changeUserRoleDTO.getOperation());
            }

            userRepository.save(user);
            return ResponseEntity.ok(userMapper.mapUserToUserInfoDTO(user));
        }

        private void grantRole(User user, String role) {
            if (isUserBusiness(user) && role.equals(Role.ROLE_ADMINISTRATOR.name())) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user cannot combine administrative and business roles!");
            }
            if (isUserAdmin(user) && (role.equals(Role.ROLE_USER.name()) || role.equals(Role.ROLE_ACCOUNTANT.name()))) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user cannot combine administrative and business roles!");
            }
            user.grantAuthority(Role.valueOf(role));
        }

        private void removeRole(User user, String role) {
            if (!user.getRoles().contains(Role.valueOf(role))) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user does not have a role!");
            }
            if (role.equals(Role.ROLE_ADMINISTRATOR.name())) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");
            }
            if (user.getRoles().size() == 1) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user must have at least one role!");
            }
            user.removeAuthority(Role.valueOf(role));
        }

        private boolean isUserBusiness(User user) {
            return user.getRoles().stream()
                    .anyMatch(r -> List.of(Role.ROLE_USER, Role.ROLE_ACCOUNTANT).contains(r));
        }

        private boolean isUserAdmin(User user) {
            return user.getRoles().stream()
                    .anyMatch(r -> r == Role.ROLE_ADMINISTRATOR);
        }
    }
  learner_created: true
- name: src/account/model/dto/ChangeUserRoleDTO.java
  visible: true
  text: |
    package account.model.dto;

    import account.util.enumeration.Operation;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @NoArgsConstructor
    public class ChangeUserRoleDTO {
        private String user;
        private String role;
        private Operation operation;
    }
  learner_created: true
- name: src/account/validation/validator/DateValidator.java
  visible: true
  text: |
    package account.validation.validator;

    import account.validation.ValidDate;

    import javax.validation.ConstraintValidator;
    import javax.validation.ConstraintValidatorContext;

    public class DateValidator implements ConstraintValidator<ValidDate, String> {
        @Override
        public boolean isValid(String string, ConstraintValidatorContext context) {
            if (string == null)
                return true;
            return (string
                    .strip()
                    .replace("\"", "")
                    .strip().matches("^(1[0-2]|0?\\d)-20\\d{2}$"));
        }
    }
  learner_created: true
- name: src/account/repository/PaymentRepository.java
  visible: true
  text: |
    package account.repository;

    import account.model.Payment;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    import java.time.LocalDate;
    import java.util.Optional;

    @Repository
    public interface PaymentRepository extends JpaRepository<Payment, Long> {

        Optional<Payment> findByEmailIgnoreCaseAndPeriod(String email, LocalDate period);
    }
  learner_created: true
- name: src/account/service/EmployeeService.java
  visible: true
  text: |
    package account.service;

    import account.mapper.PaymentMapper;
    import account.exception.PaymentNotFoundException;
    import account.exception.UserNotFoundException;
    import account.model.dto.PaymentInfoDTO;
    import account.model.Payment;
    import account.model.User;
    import account.repository.PaymentRepository;
    import account.repository.UserRepository;
    import lombok.AllArgsConstructor;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.stereotype.Service;

    import java.time.YearMonth;
    import java.time.format.DateTimeFormatter;
    import java.util.Comparator;
    import java.util.stream.Collectors;

    @Service
    @AllArgsConstructor
    public class EmployeeService {

        private final UserRepository userRepository;
        private final PaymentRepository paymentRepository;

        private final PaymentMapper paymentMapper;

        public ResponseEntity<?> getEmployeeInfo(UserDetails userDetails, String period) {
            if (period == null) {
                User user = userRepository.findByEmailIgnoreCase(userDetails.getUsername())
                        .orElseThrow(UserNotFoundException::new);

                return ResponseEntity.ok(
                        user.getPayments()
                                .stream()
                                .sorted(Comparator.comparing(Payment::getPeriod).reversed())
                                .map(paymentMapper::mapPaymentToEmployeeInfoDTO)
                                .collect(Collectors.toList()));
            }

            Payment payment = paymentRepository.findByEmailIgnoreCaseAndPeriod(userDetails.getUsername(),
                            YearMonth.parse(period, DateTimeFormatter.ofPattern("MM-yyyy")).atDay(1))
                    .orElseThrow(PaymentNotFoundException::new);
            PaymentInfoDTO paymentInfoDTO = paymentMapper.mapPaymentToEmployeeInfoDTO(payment);
            return ResponseEntity.ok(paymentInfoDTO);
        }
    }
  learner_created: true
- name: src/account/model/dto/PaymentInfoDTO.java
  visible: true
  text: |
    package account.model.dto;

    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @NoArgsConstructor
    @AllArgsConstructor
    @Data
    @Builder
    public class PaymentInfoDTO {

        private String name;

        private String lastname;

        private String period;

        private String salary;
    }
  learner_created: true
- name: src/account/mapper/PaymentMapper.java
  visible: true
  text: |
    package account.mapper;

    import account.exception.UserNotFoundException;
    import account.model.dto.NewPaymentDTO;
    import account.model.dto.PaymentInfoDTO;
    import account.model.Payment;
    import account.repository.UserRepository;
    import account.util.PaymentUtil;
    import lombok.RequiredArgsConstructor;
    import org.springframework.stereotype.Component;

    @Component
    @RequiredArgsConstructor
    public class PaymentMapper {

        private final UserRepository userRepository;

        public PaymentInfoDTO mapPaymentToEmployeeInfoDTO(Payment payment) {
            return PaymentInfoDTO
                    .builder()
                    .name(payment.getUser().getName())
                    .lastname(payment.getUser().getLastname())
                    .period(PaymentUtil.formatPeriodFromDateToString(payment.getPeriod()))
                    .salary(PaymentUtil.formatSalaryFromLongToDollarsAndCents(payment.getSalary()))
                    .build();
        }

        public Payment mapNewPaymentDTOToPayment(NewPaymentDTO newPaymentDTO) {
            return Payment.builder()
                    .email(newPaymentDTO.getEmail())
                    .period(PaymentUtil.formatPeriodFromStringToDate(newPaymentDTO.getPeriod()))
                    .salary(newPaymentDTO.getSalary())
                    .user(userRepository.findByEmailIgnoreCase(newPaymentDTO.getEmail()).orElseThrow(UserNotFoundException::new))
                    .build();
        }
    }
  learner_created: true
- name: src/account/exception/NotLoggedInException.java
  visible: true
  text: |
    package account.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.UNAUTHORIZED, reason = "You must login!")
    public class NotLoggedInException extends RuntimeException {
        public NotLoggedInException() {
            super();
        }
    }
  learner_created: true
- name: src/account/model/Payment.java
  visible: true
  text: |
    package account.model;

    import lombok.*;

    import javax.persistence.*;
    import java.time.LocalDate;

    @Getter
    @Setter
    @AllArgsConstructor
    @NoArgsConstructor
    @Entity
    @Builder
    @Table(name = "payment")
    public class Payment {

        @Id
        @GeneratedValue
        private Long id;

        @NonNull
        private String email;

        @NonNull
        private LocalDate period;

        @NonNull
        private Long salary;

        @ManyToOne
        @JoinColumn(name = "user_id")
        private User user;
    }
  learner_created: true
- name: src/account/repository/UserRepository.java
  visible: true
  text: |
    package account.repository;

    import account.model.User;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface UserRepository extends JpaRepository<User, Long> {

        Optional<User> findByEmailIgnoreCase(String email);

        boolean existsUserByEmailIgnoreCase(String email);

    }
  learner_created: true
- name: src/account/model/dto/NewPaymentDTO.java
  visible: true
  text: |
    package account.model.dto;

    import account.validation.ValidDate;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.validation.constraints.Email;
    import javax.validation.constraints.Min;

    @NoArgsConstructor
    @AllArgsConstructor
    @Data
    @Builder
    public class NewPaymentDTO {

        @Email(regexp = "\\w+(@acme.com)$", message = "Mail does not include @acme.com")
        @JsonProperty("employee")
        private String email;

        @ValidDate
        private String period;

        @Min(value = 0)
        private Long salary;
    }
  learner_created: true
- name: src/account/configuration/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package account.configuration;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(HttpServletRequest request, HttpServletResponse res, AuthenticationException authException) throws IOException, ServletException {
            res.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());

        }
    }
  learner_created: true
- name: src/account/exception/PaymentNotFoundException.java
  visible: true
  text: |
    package account.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Payment not found!")
    public class PaymentNotFoundException extends RuntimeException {
        public PaymentNotFoundException() {
            super();
        }
    }
  learner_created: true
- name: src/account/model/dto/NewPasswordDTO.java
  visible: true
  text: |
    package account.model.dto;

    import account.validation.ValidPassword;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.*;

    import javax.validation.constraints.NotEmpty;

    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor
    public class NewPasswordDTO {

        @NotEmpty
        @ValidPassword
        @JsonProperty("new_password")
        private String newPassword;
    }
  learner_created: true
- name: src/account/exception/PasswordLengthException.java
  visible: true
  text: |
    package account.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = "Password length must be 12 chars minimum!")
    public class PasswordLengthException extends RuntimeException {
        public PasswordLengthException() {
            super();
        }
    }
  learner_created: true
- name: src/account/service/AcctService.java
  visible: true
  text: |
    package account.service;

    import account.exception.PaymentNotFoundException;
    import account.model.Payment;
    import account.model.dto.ResponseStatusDTO;
    import account.repository.PaymentRepository;
    import lombok.AllArgsConstructor;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;

    import javax.transaction.Transactional;
    import java.util.List;

    @Service
    @AllArgsConstructor
    public class AcctService {

        private final PaymentRepository paymentRepository;

        @Transactional
        public ResponseEntity<ResponseStatusDTO> addPaymentsForEmployee(List<Payment> payments) {
            payments.forEach(p -> {
                if (paymentRepository.findByEmailIgnoreCaseAndPeriod(p.getEmail(), p.getPeriod()).isPresent()) {
                    throw new PaymentNotFoundException();
                }
            });
            paymentRepository.saveAll(payments);

            return ResponseEntity.ok(new ResponseStatusDTO("Added successfully!"));
        }

        @Transactional
        public ResponseEntity<ResponseStatusDTO> updatePaymentForEmployee(Payment payment) {
            Payment paymentToUpdate = paymentRepository
                    .findByEmailIgnoreCaseAndPeriod(payment.getEmail(), payment.getPeriod())
                    .orElseThrow(PaymentNotFoundException::new);
            paymentToUpdate.setSalary(payment.getSalary());
            paymentRepository.save(paymentToUpdate);

            return ResponseEntity.ok(new ResponseStatusDTO("Updated successfully!"));
        }
    }
  learner_created: true
- name: src/account/util/enumeration/Operation.java
  visible: true
  text: |
    package account.util.enumeration;

    public enum Operation {
        GRANT,
        REMOVE
    }
  learner_created: true
- name: src/account/model/dto/UserInfoDTO.java
  visible: true
  text: |
    package account.model.dto;

    import lombok.*;

    import java.util.List;

    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor
    @Builder
    public class UserInfoDTO {

        private Long id;

        private String name;

        private String lastname;

        private String email;

        private List<String> roles;
    }
  learner_created: true
- name: src/account/util/PaymentUtil.java
  visible: true
  text: |
    package account.util;

    import java.time.LocalDate;
    import java.time.YearMonth;
    import java.time.format.DateTimeFormatter;

    public final class PaymentUtil {

        public static String formatPeriodFromDateToString(LocalDate period) {
            return period.format(DateTimeFormatter.ofPattern("MMMM-yyyy"));
        }

        public static String formatSalaryFromLongToDollarsAndCents(Long salary) {
            return String.format("%d dollar(s) %d cent(s)",
                    salary / 100,
                    salary % 100);
        }

        public static LocalDate formatPeriodFromStringToDate(String period) {
            return YearMonth.parse(period, DateTimeFormatter.ofPattern("MM-yyyy")).atDay(1);
        }
    }
  learner_created: true
- name: src/account/controller/UserController.java
  visible: true
  text: |
    package account.controller;

    import account.mapper.UserMapper;
    import account.model.dto.NewPasswordDTO;
    import account.model.dto.NewUserDTO;
    import account.model.dto.UserInfoDTO;
    import account.model.User;
    import account.service.UserService;
    import lombok.AllArgsConstructor;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;

    import javax.validation.Valid;
    import java.util.Map;

    @RestController
    @RequestMapping("/api/auth")
    @Validated
    @AllArgsConstructor
    public class UserController {
        private final UserMapper userMapper;
        private final UserService userService;

        @PostMapping("/signup")
        public ResponseEntity<UserInfoDTO> registerAccount(@RequestBody @Valid NewUserDTO newUserDto) {
            User user = userMapper.mapNewUserDTOToUser(newUserDto);
            return userService.registerAccount(user);
        }

        @PostMapping("/changepass")
        public ResponseEntity<Map<String, String>> changePassword(@AuthenticationPrincipal UserDetails userDetails,
                                                                  @RequestBody @Valid NewPasswordDTO newPasswordDto) {
            return userService.changePassword(userDetails, newPasswordDto.getNewPassword());
        }
    }
  learner_created: true
- name: src/account/mapper/UserMapper.java
  visible: true
  text: |
    package account.mapper;

    import account.model.dto.NewUserDTO;
    import account.model.dto.UserInfoDTO;
    import account.util.enumeration.Role;
    import account.model.User;
    import org.springframework.stereotype.Component;

    import java.util.Objects;
    import java.util.stream.Collectors;

    @Component
    public class UserMapper {

        public User mapNewUserDTOToUser(NewUserDTO newUserDTO) {
            return User.builder()
                    .name(newUserDTO.getName())
                    .lastname(newUserDTO.getLastname())
                    .email(newUserDTO.getEmail())
                    .password(newUserDTO.getPassword())
                    .build();
        }

        public UserInfoDTO mapUserToUserInfoDTO(User user) {
            return UserInfoDTO.builder()
                    .id(user.getId())
                    .name(user.getName())
                    .lastname(user.getLastname())
                    .email(user.getEmail())
                    .roles(user.getRoles().stream()
                            .filter(Objects::nonNull)
                            .map(Role::name)
                            .sorted()
                            .collect(Collectors.toList()))
                    .build();
        }

    }
  learner_created: true
- name: src/account/model/dto/ResponseStatusDTO.java
  visible: true
  text: |
    package account.model.dto;

    public record ResponseStatusDTO(String status) {
    }
  learner_created: true
- name: src/account/util/enumeration/Status.java
  visible: true
  learner_created: true
- name: src/account/model/dto/StatusUserDTO.java
  visible: true
  learner_created: true
- name: src/account/util/enumeration/EventName.java
  visible: true
  learner_created: true
- name: src/account/repository/EventRepository.java
  visible: true
  learner_created: true
- name: src/account/service/AuditorService.java
  visible: true
  learner_created: true
- name: src/account/model/Event.java
  visible: true
  learner_created: true
- name: src/account/service/UserService.java
  visible: true
  text: |
    package account.service;

    import account.mapper.UserMapper;
    import account.exception.SamePasswordException;
    import account.exception.UserExistException;
    import account.exception.UserNotFoundException;
    import account.model.dto.UserInfoDTO;
    import account.util.enumeration.Role;
    import account.model.User;
    import account.repository.UserRepository;
    import lombok.AllArgsConstructor;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.stereotype.Service;

    import java.util.Map;

    @Service
    @AllArgsConstructor
    public class UserService {
        private final UserRepository userRepository;
        private final UserMapper userMapper;

        private final BCryptPasswordEncoder passwordEncoder;

        public ResponseEntity<UserInfoDTO> registerAccount(User user) {
            if (userRepository.existsUserByEmailIgnoreCase(user.getEmail())) {
                throw new UserExistException();
            }
            if (userRepository.findAll().isEmpty()) {
                user.grantAuthority(Role.ROLE_ADMINISTRATOR);
            } else {
                user.grantAuthority(Role.ROLE_USER);
            }

            user.setEmail(user.getEmail().toLowerCase());
            user.setPassword(passwordEncoder.encode(user.getPassword()));
            userRepository.save(user);
            UserInfoDTO userInfoDTO = userMapper.mapUserToUserInfoDTO(user);
            return ResponseEntity.ok(userInfoDTO);
        }

        public ResponseEntity<Map<String, String>> changePassword(UserDetails userDetails, String newPassword) {

            User user = userRepository.findByEmailIgnoreCase(userDetails.getUsername())
                    .orElseThrow(UserNotFoundException::new);

            if (passwordEncoder.matches(newPassword, user.getPassword())) {
                throw new SamePasswordException();
            }

            user.setPassword(passwordEncoder.encode(newPassword));
            userRepository.save(user);
            return ResponseEntity.ok(Map.of("email", user.getEmail().toLowerCase(), "status", "The password has been updated successfully"));
        }
    }
  learner_created: true
- name: src/account/security/SecurityConfiguration.java
  visible: true
  text: |
    package account.security;

    import account.exception.CustomExceptionHandler;
    import account.util.enumeration.Role;
    import lombok.RequiredArgsConstructor;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
    import org.springframework.security.config.Customizer;
    import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.web.SecurityFilterChain;
    import org.springframework.security.web.access.AccessDeniedHandler;

    @Configuration
    @EnableWebSecurity
    @RequiredArgsConstructor
    @EnableGlobalMethodSecurity(
            prePostEnabled = true,
            securedEnabled = true,
            jsr250Enabled = true)
    public class SecurityConfiguration {

        private final UserDetailsServiceImpl userDetailsService;

        @Bean
        public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
            return http
                    .csrf(csrf -> csrf.disable())
                    .headers(headers -> headers.frameOptions().disable())
                    .authorizeRequests(auth -> {
                        auth.antMatchers("/api/auth/signup", "/h2-console/**").permitAll();
                        auth.antMatchers("/api/auth/changepass").hasAnyAuthority(Role.ROLE_USER.name(), Role.ROLE_ACCOUNTANT.name(), Role.ROLE_ADMINISTRATOR.name());
                        auth.antMatchers("/api/acct/payments").hasAnyAuthority(Role.ROLE_ACCOUNTANT.name());
                        auth.antMatchers("/api/empl/payment").hasAnyAuthority(Role.ROLE_USER.name(), Role.ROLE_ACCOUNTANT.name());
                        auth.antMatchers("/api/admin/**").hasAnyAuthority(Role.ROLE_ADMINISTRATOR.name());
                    })
                    .exceptionHandling().accessDeniedHandler(accessDeniedHandler())
                    .and()
                    .sessionManagement(sessionManagement ->
                            sessionManagement.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                    .userDetailsService(userDetailsService)
                    .authenticationProvider(authenticationProvider())
                    .httpBasic(Customizer.withDefaults())
                    .build();
        }


        @Bean
        public static BCryptPasswordEncoder passwordEncoder() {
            return new BCryptPasswordEncoder(13);
        }

        @Bean
        public AccessDeniedHandler accessDeniedHandler() {
            return new CustomExceptionHandler();
        }

        @Bean
        public DaoAuthenticationProvider authenticationProvider() {
            DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();
            daoAuthenticationProvider.setPasswordEncoder(passwordEncoder());
            daoAuthenticationProvider.setUserDetailsService(userDetailsService);
            return daoAuthenticationProvider;
        }

    }
  learner_created: true
- name: src/account/service/EventService.java
  visible: true
  learner_created: true
- name: src/account/exception/CustomExceptionHandler.java
  visible: true
  text: |
    package account.exception;

    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.web.access.AccessDeniedHandler;

    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    public class CustomExceptionHandler implements AccessDeniedHandler {
        @Override
        public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException {
            response.sendError(HttpServletResponse.SC_FORBIDDEN,"Access Denied!");
        }
    }
  learner_created: true
- name: src/account/security/UserDetailsImpl.java
  visible: true
  text: |
    package account.security;

    import account.model.User;
    import lombok.AllArgsConstructor;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;
    import java.util.HashSet;
    import java.util.Set;


    @AllArgsConstructor
    public class UserDetailsImpl implements UserDetails {

        private final User user;

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            Set<GrantedAuthority> authorities = new HashSet<>();
            user.getRoles().forEach(role -> authorities.add(new SimpleGrantedAuthority(role.toString())));
            return authorities;
        }

        @Override
        public String getPassword() {
            return user.getPassword();
        }

        @Override
        public String getUsername() {
            return user.getEmail();
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: true
- name: src/account/controller/AuditorController.java
  visible: true
  learner_created: true
- name: src/account/configuration/CustomErrorHandler.java
  visible: true
  text: |
    package account.configuration;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.context.request.ServletWebRequest;

    import javax.validation.ConstraintViolationException;
    import java.io.IOException;

    @ControllerAdvice
    public class CustomErrorHandler {
        @ExceptionHandler(ConstraintViolationException.class)
        public void handleConstraintViolationException(ConstraintViolationException exception,
                                                       ServletWebRequest webRequest) throws IOException {
            assert webRequest.getResponse() != null;
            webRequest.getResponse().sendError(HttpStatus.BAD_REQUEST.value(), exception.getMessage());
        }
    }
  learner_created: true
- name: src/account/configuration/CustomAccessDeniedHandler.java
  visible: true
  learner_created: true
- name: src/account/security/CustomLoginFailureHandler.java
  visible: true
  learner_created: true
- name: src/account/security/AuthenticationFailureListener.java
  visible: true
  learner_created: true
- name: src/account/util/constant/Constant.java
  visible: true
  learner_created: true
- name: src/account/security/AuthenticationSuccessListener.java
  visible: true
  learner_created: true
- name: src/account/service/PaymentService.java
  visible: true
  learner_created: true
- name: src/account/service/LoginAttemptService.java
  visible: true
  learner_created: true
- name: src/account/listener/AuthSuccessListener.java
  visible: true
  learner_created: true
- name: src/account/exception/BreachedPasswordException.java
  visible: true
  learner_created: true
- name: src/account/exception/UserExistException.java
  visible: true
  text: |
    package account.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "User exist!")
    public class UserExistException extends RuntimeException {
        public UserExistException() {
            super();
        }
    }
  learner_created: true
- name: src/account/util/AppUtils.java
  visible: true
  learner_created: true
- name: src/account/mapper/ModelMapper.java
  visible: true
  learner_created: true
- name: src/account/dto/user/RoleDTO.java
  visible: true
  learner_created: true
- name: src/account/dto/payment/PaymentDTO.java
  visible: true
  learner_created: true
- name: src/account/dto/payment/PaymentResponseDTO.java
  visible: true
  learner_created: true
- name: src/account/model/event/Action.java
  visible: true
  learner_created: true
- name: src/account/model/user/User.java
  visible: true
  learner_created: true
- name: src/account/dto/user/PasswordChangedDTO.java
  visible: true
  learner_created: true
- name: src/account/model/user/Role.java
  visible: true
  learner_created: true
- name: src/account/dto/user/UserDTO.java
  visible: true
  learner_created: true
- name: src/account/model/user/RoleOperation.java
  visible: true
  learner_created: true
- name: src/account/model/event/Event.java
  visible: true
  learner_created: true
- name: src/account/dto/user/DeleteUserResponseDTO.java
  visible: true
  learner_created: true
- name: src/account/model/payment/Payment.java
  visible: true
  learner_created: true
- name: src/account/dto/user/NewPasswordDTO.java
  visible: true
  learner_created: true
- name: src/account/model/user/AccessOperation.java
  visible: true
  learner_created: true
- name: src/account/dto/user/ChangeAccessDTO.java
  visible: true
  learner_created: true
- name: src/account/dto/user/StatusResponseDTO.java
  visible: true
  learner_created: true
- name: src/account/listener/AuthFailureListener.java
  visible: true
  learner_created: true
- name: src/account/util/Formatter.java
  visible: true
  learner_created: true
- name: src/account/controller/AuthController.java
  visible: true
  learner_created: true
- name: src/account/controller/AccountController.java
  visible: true
  learner_created: true
- name: src/account/controller/AdminController.java
  visible: true
  text: |
    package account.controller;

    import account.model.dto.DeleteUserResponseDTO;
    import account.model.dto.ChangeUserRoleDTO;
    import account.model.dto.UserInfoDTO;
    import account.service.AdminService;
    import lombok.AllArgsConstructor;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.access.prepost.PreAuthorize;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import javax.validation.constraints.Email;
    import java.util.List;

    @RestController
    @Validated
    @AllArgsConstructor
    @PreAuthorize("hasRole('ROLE_ADMINISTRATOR')")
    @RequestMapping("/api/admin/user")
    public class AdminController {

        private final AdminService adminService;

        @GetMapping
        public ResponseEntity<List<UserInfoDTO>> informationAboutEmployees() {
            return adminService.informationAboutEmployee();
        }

        @DeleteMapping("/{userEmail}")
        public ResponseEntity<DeleteUserResponseDTO> deleteUser(@PathVariable @Email String userEmail,
                                                                @AuthenticationPrincipal UserDetails userDetails) {
            return adminService.deleteUser(userEmail);
        }

        @PutMapping("/role")
        public ResponseEntity<UserInfoDTO> changeUserRole(@RequestBody @Valid ChangeUserRoleDTO changeUserRoleDTO) {
            return adminService.changeUserRole(changeUserRoleDTO);
        }
    }
  learner_created: true
- name: src/account/validation/ValidDate.java
  visible: true
  text: |
    package account.validation;

    import account.validation.validator.DateValidator;

    import javax.validation.Constraint;
    import javax.validation.Payload;
    import java.lang.annotation.Retention;
    import java.lang.annotation.RetentionPolicy;

    @Constraint(validatedBy = DateValidator.class)
    @Retention(RetentionPolicy.RUNTIME)
    public @interface ValidDate {
        String message() default "Date must be in MMMM-YYYY format";

        Class<?>[] groups() default {};

        Class<? extends Payload>[] payload() default {};
    }
  learner_created: true
- name: src/account/security/ApplicationSecurityConfig.java
  visible: true
  learner_created: true
- name: src/account/controller/SecurityController.java
  visible: true
  learner_created: true
- name: src/account/security/UserDetailsServiceImpl.java
  visible: true
  text: |
    package account.security;

    import account.exception.UserNotFoundException;
    import account.repository.UserRepository;
    import lombok.AllArgsConstructor;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    @Service
    @AllArgsConstructor
    public class UserDetailsServiceImpl implements UserDetailsService {

        private final UserRepository userRepository;

        @Override
        public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
            return userRepository.findByEmailIgnoreCase(email)
                    .map(UserDetailsImpl::new)
                    .orElseThrow(UserNotFoundException::new);
        }
    }
  learner_created: true
- name: src/account/validation/ValidPassword.java
  visible: true
  text: |
    package account.validation;

    import account.validation.validator.PasswordValidator;

    import javax.validation.Constraint;
    import javax.validation.Payload;
    import java.lang.annotation.Retention;
    import java.lang.annotation.RetentionPolicy;

    @Constraint(validatedBy = PasswordValidator.class)
    @Retention(RetentionPolicy.RUNTIME)
    public @interface ValidPassword {
        String message() default "";
        Class<?>[] groups() default {};
        Class<? extends Payload>[] payload() default {};
    }
  learner_created: true
- name: src/account/validation/validator/PasswordValidator.java
  visible: true
  text: |
    package account.validation.validator;

    import account.exception.BreachedPasswordException;
    import account.exception.PasswordLengthException;
    import account.validation.ValidPassword;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.ConstraintValidator;
    import javax.validation.ConstraintValidatorContext;
    import java.util.List;

    public class PasswordValidator implements ConstraintValidator<ValidPassword, String> {
        private final List<String> breachedPasswords = List.of(
                "PasswordForJanuary",
                "PasswordForFebruary",
                "PasswordForMarch",
                "PasswordForApril",
                "PasswordForMay",
                "PasswordForJune",
                "PasswordForJuly",
                "PasswordForAugust",
                "PasswordForSeptember",
                "PasswordForOctober",
                "PasswordForNovember",
                "PasswordForDecember");

        @Override
        public boolean isValid(String password, ConstraintValidatorContext context) {
            if (password == null) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
            } else if (breachedPasswords.contains(password)) {
                throw new BreachedPasswordException();
            } else if (password.length() < 12) {
                throw new PasswordLengthException();
            }
            return true;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16606#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 20 Mar 2023 20:59:55 UTC"
record: 6
